// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (content)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateMessage(ctx context.Context, content string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createMessage, content)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createPendingMessage = `-- name: CreatePendingMessage :one
INSERT INTO pending_messages (content)
VALUES (?)
RETURNING id
`

func (q *Queries) CreatePendingMessage(ctx context.Context, content string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPendingMessage, content)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPendingMessage = `-- name: GetPendingMessage :one
SELECT id, content, status, created_at
FROM pending_messages
WHERE id = ?
`

func (q *Queries) GetPendingMessage(ctx context.Context, id int64) (PendingMessage, error) {
	row := q.db.QueryRowContext(ctx, getPendingMessage, id)
	var i PendingMessage
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getRandomMessage = `-- name: GetRandomMessage :one
SELECT id, content, created_at 
FROM messages 
ORDER BY RANDOM() 
LIMIT 1
`

func (q *Queries) GetRandomMessage(ctx context.Context) (Message, error) {
	row := q.db.QueryRowContext(ctx, getRandomMessage)
	var i Message
	err := row.Scan(&i.ID, &i.Content, &i.CreatedAt)
	return i, err
}

const listPendingMessages = `-- name: ListPendingMessages :many
SELECT id, content, status, created_at 
FROM pending_messages 
WHERE status = 'pending'
ORDER BY created_at DESC
`

func (q *Queries) ListPendingMessages(ctx context.Context) ([]PendingMessage, error) {
	rows, err := q.db.QueryContext(ctx, listPendingMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PendingMessage
	for rows.Next() {
		var i PendingMessage
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePendingMessageStatus = `-- name: UpdatePendingMessageStatus :exec
UPDATE pending_messages 
SET status = ?
WHERE id = ?
`

type UpdatePendingMessageStatusParams struct {
	Status sql.NullString `json:"status"`
	ID     int64          `json:"id"`
}

func (q *Queries) UpdatePendingMessageStatus(ctx context.Context, arg UpdatePendingMessageStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePendingMessageStatus, arg.Status, arg.ID)
	return err
}
